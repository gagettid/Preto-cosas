<# 
    PRETORIAN — EJERCICIO CONTROLADO DE SEGURIDAD
    ------------------------------------------------
    Este script simula la táctica MITRE ATT&CK T1486 (Impact: Data Encrypted for Impact)
    de forma SEGURA en un entorno de laboratorio, con datos dummy.
    :warning: DISCLAIMER (IMPORTANTE):
    - Este es un EJERCICIO DE PRETORIAN exclusivamente para LAB / DEMO.
    - NO es ransomware real; solo comprime y renombra archivos para generar telemetría.
    - NO EJECUTAR en equipos/productivos ni sobre datos reales.
    - El operador es responsable de validar el entorno y permisos.
#>
[CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
  [Parameter(Mandatory=$true)][string]$TargetDir,
  [int]$ThrottleMs = 150,
  [switch]$DeleteOriginals = $false,
  [switch]$Use7Zip = $false,
  [string]$SevenZipPath = "C:\Program Files\7-Zip\7z.exe",
  [string]$Password = "TestOnly123!",
  [switch]$Revert = $false
)
# ---------- SALVAGUARDAS ----------
if (-not (Test-Path $TargetDir -PathType Container)) { throw "TargetDir no existe o no es carpeta." }
$full = (Resolve-Path $TargetDir).Path
# Bloquea rutas sensibles y requiere cierta profundidad (p.ej. C:\Lab\Datos)
$danger = @("C:\","C:\Windows","C:\Program Files","C:\Program Files (x86)","C:\Users","C:\ProgramData")
if ($danger -contains $full) { throw "Se rechaza ejecutar en rutas de sistema/raíz: $full" }
if ((($full -split '[\\/]').Count) -lt 3) { throw "Ruta demasiado genérica. Usa una carpeta de LAB más profunda (p.ej. C:\Lab\DummyData)." }
# Marcador de seguridad: evita ejecución accidental
$marker = Join-Path $full ".safe_to_encrypt"
if (-not $Revert -and -not (Test-Path $marker)) {
  Write-Host "SIMULACIÓN T1486. Creando marcador: $marker" -ForegroundColor Yellow
  "Solo proceder en LAB/datos dummy. Ejecuta nuevamente si estás seguro." | Out-File -FilePath $marker -Encoding UTF8 -Force
  # Tras crear el marcador, salir para forzar una segunda ejecución consciente:
  Write-Warning "Marcador creado. Vuelve a ejecutar el script para continuar la simulación."
  return
}
# ---------- HELPERS ----------
function Write-Note {
  $note = @"
==========================================
PRETORIAN — EJERCICIO CONTROLADO (LAB)
==========================================
Sus archivos fueron "cifrados" COMO PARTE DE UNA PRUEBA SEGURA DE LABORATORIO.
NO se realizó cifrado real; se aplicaron compresión y renombrado para TELEMETRÍA.
Si ve este mensaje fuera de un entorno de laboratorio, contacte a su equipo de seguridad.
Organización: PRETORIAN
Táctica simulada: MITRE ATT&CK T1486 (Data Encrypted for Impact)
Test ID: $(Get-Date -Format s)
==========================================
"@
  Set-Content -Path (Join-Path $full "READ_ME_TEST_RANSOM_NOTE.txt") -Value $note -Encoding UTF8 -Force
}
function Get-WorkFiles {
  Get-ChildItem -Path $full -File -Recurse -ErrorAction SilentlyContinue | Where-Object {
    $_.FullName -notmatch "(\.zip$|\.7z$|READ_ME_TEST_RANSOM_NOTE\.txt$|\.locked_sim$)"
  }
}
# ---------- MODO REVERT ----------
if ($Revert) {
  Write-Host "Revirtiendo artefactos de simulación en $full ..." -ForegroundColor Cyan
  $renamed = Get-ChildItem -Path $full -Recurse -File | Where-Object { $_.Name -like "*.locked_sim" }
  foreach ($f in $renamed) {
    $orig = $f.FullName -replace "\.locked_sim$",""
    if ($PSCmdlet.ShouldProcess($f.FullName, "Rename to original")) {
      Rename-Item -Path $f.FullName -NewName ([IO.Path]::GetFileName($orig)) -Force
    }
    Start-Sleep -Milliseconds $ThrottleMs
  }
  $archives = Get-ChildItem -Path $full -Recurse -Include *.zip,*.7z -ErrorAction SilentlyContinue
  foreach ($a in $archives) {
    if ($PSCmdlet.ShouldProcess($a.FullName, "Remove archive")) {
      Remove-Item $a.FullName -Force -ErrorAction SilentlyContinue
    }
  }
  $notePath = Join-Path $full "READ_ME_TEST_RANSOM_NOTE.txt"
  if (Test-Path $notePath -PathType Leaf) {
    if ($PSCmdlet.ShouldProcess($notePath, "Remove ransom note")) {
      Remove-Item $notePath -Force -ErrorAction SilentlyContinue
    }
  }
  Write-Output "Reversión completa."
  return
}
# ---------- SIMULACIÓN ----------
Write-Host "Iniciando simulación T1486 en: $full" -ForegroundColor Green
Write-Note
$files = Get-WorkFiles
if (-not $files -or $files.Count -eq 0) { Write-Output "No hay archivos para procesar."; return }
$use7z = $Use7Zip -and (Test-Path $SevenZipPath)
foreach ($f in $files) {
  try {
    $zipPath = "$($f.FullName).zip"
    if ($use7z) { $zipPath = "$($f.FullName).7z" }
    if ($use7z) {
      if ($PSCmdlet.ShouldProcess($f.FullName, "7-Zip archive + rename (.locked_sim)")) {
        & $SevenZipPath a -t7z $zipPath "`"$($f.FullName)`"" -p$Password -y | Out-Null
        Rename-Item -Path $f.FullName -NewName ($f.Name + ".locked_sim") -Force
      }
    } else {
      if (Test-Path $zipPath) {
        if ($PSCmdlet.ShouldProcess($zipPath, "Remove pre-existing archive")) {
          Remove-Item $zipPath -Force
        }
      }
      if ($PSCmdlet.ShouldProcess($f.FullName, "Compress-Archive + rename (.locked_sim)")) {
        Compress-Archive -Path $f.FullName -DestinationPath $zipPath -Force
        Rename-Item -Path $f.FullName -NewName ($f.Name + ".locked_sim") -Force
      }
    }
    if ($DeleteOriginals) {
      $toDelete = Join-Path $f.DirectoryName ($f.Name + ".locked_sim")
      if (Test-Path $toDelete) {
        if ($PSCmdlet.ShouldProcess($toDelete, "Delete renamed original (simulate impact)")) {
          Remove-Item $toDelete -Force
        }
      }
    }
    Start-Sleep -Milliseconds $ThrottleMs
  }
  catch {
    Write-Warning "Error con '$($f.FullName)': $($_.Exception.Message)"
  }
}
Write-Output "Simulación T1486 completada en $full"